//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// pass_primitive.cpp
//
// Code generation for function 'pass_primitive'
//

// Include files
#include "pass_primitive.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void pass_primitive(double v0, double a0, double sf, double vfmin, double vfmax,
                    double Tmin, double Tmax, double coeffsT2[6], double *v2,
                    double *T2, double coeffsT1[6], double *v1, double *T1)
{
  double Tstar;
  double Tvmax;
  double vfminStar;
  //
  //            Agent Logic
  //          Pass Primitive
  //               2022
  //
  if (a0 >= 0.0) {
    // FINAL_OPT_TIME_PASS
    //     OUT1 = FINAL_OPT_TIME_PASS(V0,A0,SF,VF)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    vfminStar = a0 * sf * 60.0;
    Tstar = v0 * v0 * 49.0;
    Tvmax = sf * 30.0 /
            ((v0 * 7.0 + vfmax * 8.0) +
             std::sqrt(((vfminStar + v0 * vfmax * 112.0) + Tstar) +
                       vfmax * vfmax * 64.0));
    // FINAL_OPT_TIME_PASS
    //     OUT1 = FINAL_OPT_TIME_PASS(V0,A0,SF,VF)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    Tstar = sf * 30.0 /
            ((v0 * 7.0 + vfmin * 8.0) +
             std::sqrt(((vfminStar + v0 * vfmin * 112.0) + Tstar) +
                       vfmin * vfmin * 64.0));
  } else {
    // TIME_MIN_VEL
    //     OUT1 = TIME_MIN_VEL(A0,SF)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    Tstar = -(3.872983346207417 * std::sqrt(-a0 * sf)) / a0;
    // FINAL_OPT_VEL_PASS
    //     FINAL_OPT_VEL_PASS_VAR = FINAL_OPT_VEL_PASS(V0,A0,SF,T)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    vfminStar =
        ((sf * -15.0 + Tstar * v0 * 7.0) + Tstar * Tstar * a0) * -0.125 / Tstar;
    if ((vfminStar < vfmin) && (vfminStar < vfmax)) {
      // FINAL_OPT_TIME_PASS
      //     OUT1 = FINAL_OPT_TIME_PASS(V0,A0,SF,VF)
      //     This function was generated by the Symbolic Math Toolbox
      //     version 9.2. 30-Dec-2022 16:09:26
      Tvmax =
          sf * 30.0 /
          ((v0 * 7.0 + vfmax * 8.0) +
           std::sqrt(((a0 * sf * 60.0 + v0 * vfmax * 112.0) + v0 * v0 * 49.0) +
                     vfmax * vfmax * 64.0));
      // FINAL_OPT_TIME_PASS
      //     OUT1 = FINAL_OPT_TIME_PASS(V0,A0,SF,VF)
      //     This function was generated by the Symbolic Math Toolbox
      //     version 9.2. 30-Dec-2022 16:09:26
      Tstar =
          sf * 30.0 /
          ((v0 * 7.0 + vfmin * 8.0) +
           std::sqrt(((a0 * sf * 60.0 + v0 * vfmin * 112.0) + v0 * v0 * 49.0) +
                     vfmin * vfmin * 64.0));
    } else if ((vfmin < vfminStar) && (vfminStar < vfmax)) {
      // FINAL_OPT_TIME_PASS
      //     OUT1 = FINAL_OPT_TIME_PASS(V0,A0,SF,VF)
      //     This function was generated by the Symbolic Math Toolbox
      //     version 9.2. 30-Dec-2022 16:09:26
      Tvmax =
          sf * 30.0 /
          ((v0 * 7.0 + vfmax * 8.0) +
           std::sqrt(((a0 * sf * 60.0 + v0 * vfmax * 112.0) + v0 * v0 * 49.0) +
                     vfmax * vfmax * 64.0));
    } else {
      Tvmax = 0.0;
      Tstar = 0.0;
    }
  }
  if ((Tmin == 0.0) && (Tmax == 0.0)) {
    *T1 = Tvmax;
    *T2 = Tstar;
  } else {
    *T1 = std::fmax(Tvmax, Tmin);
    *T2 = std::fmin(Tstar, Tmax);
  }
  if ((Tvmax != 0.0) && (Tvmax <= Tstar) && (*T1 <= *T2)) {
    double b_v2_tmp;
    double c_v2_tmp;
    double coeffsT1_tmp;
    double t3;
    double t4;
    double v2_tmp;
    // FINAL_OPT_VEL_PASS
    //     FINAL_OPT_VEL_PASS_VAR = FINAL_OPT_VEL_PASS(V0,A0,SF,T)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    vfminStar = *T1 * *T1;
    Tstar = *T1 * v0;
    Tvmax = vfminStar * a0;
    *v1 = ((sf * -15.0 + Tstar * 7.0) + Tvmax) * -0.125 / *T1;
    // FINAL_OPT_VEL_PASS
    //     FINAL_OPT_VEL_PASS_VAR = FINAL_OPT_VEL_PASS(V0,A0,SF,T)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    v2_tmp = *T2 * *T2;
    b_v2_tmp = *T2 * v0;
    c_v2_tmp = v2_tmp * a0;
    *v2 = ((sf * -15.0 + b_v2_tmp * 7.0) + c_v2_tmp) * -0.125 / *T2;
    // COEF_LIST
    //     COEF_LIST_VAR = COEF_LIST(V0,A0,SF,VF,AF,T)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    t3 = 0.0 * vfminStar;
    t4 = Tvmax * 3.0;
    coeffsT1[0] = 0.0;
    coeffsT1[1] = v0;
    coeffsT1[2] = a0;
    coeffsT1_tmp = *T1 * *v1;
    coeffsT1[3] =
        1.0 / rt_powd_snf(*T1, 3.0) *
        ((((sf * -20.0 + t4) - t3) + Tstar * 12.0) + coeffsT1_tmp * 8.0) * -3.0;
    coeffsT1[4] = 1.0 / (vfminStar * vfminStar) *
                  ((((sf * -30.0 - t3 * 2.0) + t4) + Tstar * 16.0) +
                   coeffsT1_tmp * 14.0) *
                  12.0;
    coeffsT1[5] =
        1.0 / rt_powd_snf(*T1, 5.0) *
        ((((sf * -12.0 - t3) + Tstar * 6.0) + coeffsT1_tmp * 6.0) + Tvmax) *
        -60.0;
    // COEF_LIST
    //     COEF_LIST_VAR = COEF_LIST(V0,A0,SF,VF,AF,T)
    //     This function was generated by the Symbolic Math Toolbox version 9.2.
    //     30-Dec-2022 16:09:26
    t3 = 0.0 * v2_tmp;
    t4 = c_v2_tmp * 3.0;
    coeffsT2[0] = 0.0;
    coeffsT2[1] = v0;
    coeffsT2[2] = a0;
    vfminStar = *T2 * *v2;
    coeffsT2[3] =
        1.0 / rt_powd_snf(*T2, 3.0) *
        ((((sf * -20.0 + t4) - t3) + b_v2_tmp * 12.0) + vfminStar * 8.0) * -3.0;
    coeffsT2[4] = 1.0 / (v2_tmp * v2_tmp) *
                  ((((sf * -30.0 - t3 * 2.0) + t4) + b_v2_tmp * 16.0) +
                   vfminStar * 14.0) *
                  12.0;
    coeffsT2[5] =
        1.0 / rt_powd_snf(*T2, 5.0) *
        ((((sf * -12.0 - t3) + b_v2_tmp * 6.0) + vfminStar * 6.0) + c_v2_tmp) *
        -60.0;
  } else {
    for (int i{0}; i < 6; i++) {
      coeffsT1[i] = 0.0;
      coeffsT2[i] = 0.0;
    }
    *T1 = 0.0;
    *T2 = 0.0;
    *v1 = 0.0;
    *v2 = 0.0;
  }
}

void pass_primitive_initialize()
{
}

void pass_primitive_terminate()
{
}

// End of code generation (pass_primitive.cpp)
